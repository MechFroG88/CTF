from Crypto.Util.number import bytes_to_long, getPrime, inverse , long_to_bytes
from sage.all import *
import gmpy2

e = 3
n = 12244388165365386213844555403476546023325748721747538535049640674024557931448699784621780623434556325231045307906765686626014943363116397836648242528236726215565271889296142723550124052605488198471163242311734632335490907946910930411633488341596484756942701388965776853759840725993889981107671069702378731594474082804267823148105120471953670014292605308812053279742079188732127101003396074637269976520415494161194039522489459186597807675114509769986261293196695361227018334639010456092652407490774278654106373708096505297569964164995045502252972076580501799013149410946601720802171058786895084467211946268934925863297
c = 1622020787297602189155959373873146291502963303004005018782083629008733338418264151387609585351442561046560071049874104707472554545853449071206419777545103052800392417124201378008966553432358169751920283231351958880835801001502107206779493
i = 8*6
flag = b'extremely-long-prefix-flag{'

R,x = objgen(PolynomialRing(Zmod(n),'x'))
poly = ((2**i)*bytes_to_long(flag)+x)**e - c
print(long_to_bytes(poly.small_roots()[0]))


